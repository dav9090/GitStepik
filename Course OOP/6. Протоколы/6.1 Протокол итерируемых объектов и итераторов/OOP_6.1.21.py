'''
 –ö–ª–∞—Å—Å LoopTrackerüå∂Ô∏è
–†–µ–∞–ª–∏–∑—É–π—Ç–µ –∫–ª–∞—Å—Å LoopTracker. –ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∫–ª–∞—Å—Å –¥–æ–ª–∂–µ–Ω –ø—Ä–∏–Ω–∏–º–∞—Ç—å –æ–¥–∏–Ω –∞—Ä–≥—É–º–µ–Ω—Ç:

iterable ‚Äî –∏—Ç–µ—Ä–∏—Ä—É–µ–º—ã–π –æ–±—ä–µ–∫—Ç
–≠–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ LoopTracker –¥–æ–ª–∂–µ–Ω —è–≤–ª—è—Ç—å—Å—è –∏—Ç–µ—Ä–∞—Ç–æ—Ä–æ–º, –∫–æ—Ç–æ—Ä—ã–π –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã –∏—Ç–µ—Ä–∏—Ä—É–µ–º–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ iterable –≤ –∏—Å—Ö–æ–¥–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ, –∞ –∑–∞—Ç–µ–º –≤–æ–∑–±—É–∂–¥–∞–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ StopIteration.

–ö–ª–∞—Å—Å LoopTracker –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å —á–µ—Ç—ã—Ä–µ —Å–≤–æ–π—Å—Ç–≤–∞:

accesses ‚Äî —Å–≤–æ–π—Å—Ç–≤–æ, –¥–æ—Å—Ç—É–ø–Ω–æ–µ —Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è, –≤–æ–∑–≤—Ä–∞—â–∞—é—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤, —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏—Ç–µ—Ä–∞—Ç–æ—Ä–æ–º –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç
empty_accesses ‚Äî —Å–≤–æ–π—Å—Ç–≤–æ, –¥–æ—Å—Ç—É–ø–Ω–æ–µ —Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è, –≤–æ–∑–≤—Ä–∞—â–∞—é—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–æ–ª—É—á–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π —ç–ª–µ–º–µ–Ω—Ç –æ–ø—É—Å—Ç–µ–≤—à–µ–≥–æ –∏—Ç–µ—Ä–∞—Ç–æ—Ä–∞
first ‚Äî —Å–≤–æ–π—Å—Ç–≤–æ, –¥–æ—Å—Ç—É–ø–Ω–æ–µ —Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è, –≤–æ–∑–≤—Ä–∞—â–∞—é—â–µ–µ –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –∏—Ç–µ—Ä–∞—Ç–æ—Ä–∞ –∏ –Ω–µ —Å–¥–≤–∏–≥–∞—é—â–µ–µ –µ–≥–æ. –ï—Å–ª–∏ –∏—Ç–µ—Ä–∞—Ç–æ—Ä –Ω–µ –∏–º–µ–µ—Ç –ø–µ—Ä–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞, —Ç–æ –µ—Å—Ç—å —Å–æ–∑–¥–∞–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—É—Å—Ç–æ–≥–æ –∏—Ç–µ—Ä–∏—Ä—É–µ–º–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞, —Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤–æ–∑–±—É–∂–¥–µ–Ω–æ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ AttributeError —Å —Ç–µ–∫—Å—Ç–æ–º:
–ò—Å—Ö–æ–¥–Ω—ã–π –∏—Ç–µ—Ä–∏—Ä—É–µ–º—ã–π –æ–±—ä–µ–∫—Ç –ø—É—Å—Ç
last ‚Äî —Å–≤–æ–π—Å—Ç–≤–æ, –¥–æ—Å—Ç—É–ø–Ω–æ–µ —Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è, –≤–æ–∑–≤—Ä–∞—â–∞—é—â–µ–µ –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç, —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏—Ç–µ—Ä–∞—Ç–æ—Ä–æ–º –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç. –ï—Å–ª–∏ –∏—Ç–µ—Ä–∞—Ç–æ—Ä –µ—â–µ –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª –Ω–∏ –æ–¥–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞, —Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤–æ–∑–±—É–∂–¥–µ–Ω–æ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ AttributeError —Å —Ç–µ–∫—Å—Ç–æ–º:
–ü–æ—Å–ª–µ–¥–Ω–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –Ω–µ—Ç
–ö–ª–∞—Å—Å LoopTracker –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –æ–¥–∏–Ω –º–µ—Ç–æ–¥ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞:

is_empty() ‚Äî –º–µ—Ç–æ–¥, –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∏–π True, –µ—Å–ª–∏ –∏—Ç–µ—Ä–∞—Ç–æ—Ä –æ–ø—É—Å—Ç–æ—à–µ–Ω, –∏–ª–∏ False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è. –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç—Å—è, —á—Ç–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∫–ª–∞—Å—Å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏.

–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –ö–ª–∞—Å—Å LoopTracker –¥–æ–ª–∂–µ–Ω —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è—Ç—å –ø—Ä–æ—Ç–æ–∫–æ–ª—É –∏—Ç–µ—Ä–∞—Ç–æ—Ä–∞, —Ç–æ –µ—Å—Ç—å –∏–º–µ—Ç—å –º–µ—Ç–æ–¥—ã __iter__() –∏ __next__(). –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∂–µ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–π.

–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 3. –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ —Å—Å—ã–ª–∫–∞–º:
https://github.com/python-generation/OOP/tree/main/Module_5/Module_5.10/Module_6.1.21
'''

import copy
class LoopTracker:
    def __init__(self, iterable):
        self.it = iter(iterable)
        self.iterable = list(iterable)
        self.access = 0
        self.empty_access = 0
        self.__last = '123123'

    def __iter__(self):
        return self.it
    def __next__(self):
        try:
            s = next(self.it)
            self.access += 1
            self.__last = s
            return s
        except StopIteration:
            self.empty_access += 1


    @property
    def accesses(self):
        return self.access
    @property
    def empty_accesses(self):
        return self.empty_access
    @property
    def first(self):
        try:
            return self.iterable[0]
        except:
            raise AttributeError('–ò—Å—Ö–æ–¥–Ω—ã–π –∏—Ç–µ—Ä–∏—Ä—É–µ–º—ã–π –æ–±—ä–µ–∫—Ç –ø—É—Å—Ç')

    @property
    def last(self):
        if self.__last == '123123':
            raise AttributeError('–ü–æ—Å–ª–µ–¥–Ω–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –Ω–µ—Ç')
        return self.__last
    def is_empty(self):
        p = copy.deepcopy(self.it)
        try:
            next(p)
            return False
        except StopIteration:
            return True



# INPUT DATA:

# TEST_1:
loop_tracker = LoopTracker([1, 2, 3])

print(next(loop_tracker))
print(list(loop_tracker))
print('test 1 passed')
# TEST_2:
loop_tracker = LoopTracker([1, 2, 3])

print(loop_tracker.accesses)
next(loop_tracker)
next(loop_tracker)
print(loop_tracker.accesses)
print('test 2 passed')
# TEST_3:
loop_tracker = LoopTracker([1, 2, 3])
print(loop_tracker.first)

print(next(loop_tracker))
print(loop_tracker.first)

print(next(loop_tracker))
print(loop_tracker.first)

print(next(loop_tracker))
print(loop_tracker.first)
print('test 3 passed')
# TEST_4:
loop_tracker = LoopTracker([1, 2, 3])

print(next(loop_tracker))
print(loop_tracker.last)

print(next(loop_tracker))
print(loop_tracker.last)

print(next(loop_tracker))
print(loop_tracker.last)
print('test 4 passed')
# TEST_5:
loop_tracker = LoopTracker([1, 2])

print(loop_tracker.empty_accesses)
next(loop_tracker)
next(loop_tracker)

for _ in range(5):
    try:
        next(loop_tracker)
    except StopIteration:
        pass

print(loop_tracker.empty_accesses)
print('test 5 passed')
# TEST_6:
loop_tracker = LoopTracker([1, 2])

print(loop_tracker.is_empty())
next(loop_tracker)
print(loop_tracker.is_empty())
next(loop_tracker)
print(loop_tracker.is_empty())
print('test 6 passed')
# TEST_7:
loop_tracker = LoopTracker([1, 2, 3])

print(loop_tracker.first)
print(next(loop_tracker))
print('test 7 passed')
# TEST_8:
loop_tracker = LoopTracker([])

try:
    print(loop_tracker.first)
except AttributeError as e:
    print(e)

# TEST_9:
loop_tracker = LoopTracker([1, 2, 3])

print(next(loop_tracker))
print(loop_tracker.last)
print(next(loop_tracker))
print(loop_tracker.last)

# TEST_10:
loop_tracker = LoopTracker([1, 2, 3])

try:
    print(loop_tracker.last)
except AttributeError as e:
    print(e)

# TEST_11:
loop_tracker = LoopTracker(range(1_000))

for _ in range(100_000):
    next(loop_tracker, None)

print(loop_tracker.accesses)
print(loop_tracker.empty_accesses)

# TEST_12:
loop_tracker = LoopTracker(dict.fromkeys(range(100)))

print(next(loop_tracker))
print(next(loop_tracker))
print(next(loop_tracker))
print(loop_tracker.accesses)
print(loop_tracker.first)
print(loop_tracker.last)
print(loop_tracker.is_empty())

# TEST_13:
loop_tracker = LoopTracker([1, 2, 3])

try:
    loop_tracker.accesses = 1
except AttributeError as e:
    print(type(e))

try:
    loop_tracker.first = 1
except AttributeError as e:
    print(type(e))

try:
    loop_tracker.last = 1
except AttributeError as e:
    print(type(e))
