'''
–ö–ª–∞—Å—Å Grouperüå∂Ô∏èüå∂Ô∏è
–ù–µ—Ä–µ–¥–∫–æ –Ω–∞–º –ø—Ä–∏—Ö–æ–¥–∏—Ç—Å—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞—Ç—å –æ–±—ä–µ–∫—Ç—ã –ø–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º—É –ø—Ä–∏–∑–Ω–∞–∫—É. –ù–∞–ø—Ä–∏–º–µ—Ä, —Å—Ç—Ä–æ–∫–∏ –º–æ–∂–Ω–æ —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞—Ç—å –ø–æ –∏—Ö –¥–ª–∏–Ω–µ –∏–ª–∏ –ø–µ—Ä–≤–æ–º—É —Å–∏–º–≤–æ–ª—É. –†–µ–∞–ª–∏–∑—É–π—Ç–µ –∫–ª–∞—Å—Å Grouper, –æ–ø–∏—Å—ã–≤–∞—é—â–∏–π –æ–±—ä–µ–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π –≥—Ä—É–ø–ø–∏—Ä—É–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–µ–∫–æ—Ç–æ—Ä–æ–≥–æ –∏—Ç–µ—Ä–∏—Ä—É–µ–º–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª—é—á–µ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–∏. –ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∫–ª–∞—Å—Å –¥–æ–ª–∂–µ–Ω –ø—Ä–∏–Ω–∏–º–∞—Ç—å –¥–≤–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º –ø–æ—Ä—è–¥–∫–µ:

iterable ‚Äî –∏—Ç–µ—Ä–∏—Ä—É–µ–º—ã–π –æ–±—ä–µ–∫—Ç
key ‚Äî –∫–ª—é—á–µ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è
–≠–ª–µ–º–µ–Ω—Ç—ã –ø–æ–ø–∞–¥–∞—é—Ç –≤ –æ–¥–Ω—É –≥—Ä—É–ø–ø—É, –µ—Å–ª–∏ –ø—Ä–∏ –∏—Ö –ø–µ—Ä–µ–¥–∞—á–µ –≤ –∫–ª—é—á–µ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –æ–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç.  –ù–∞–ø—Ä–∏–º–µ—Ä, elem1 –∏ elem2 –ø–æ–ø–∞–¥–∞—é—Ç –≤ –æ–¥–Ω—É –≥—Ä—É–ø–ø—É, –µ—Å–ª–∏ key(elem1) == key(elem2). –ó–Ω–∞—á–µ–Ω–∏–µ key(elem1) –±—É–¥–µ–º –Ω–∞–∑—ã–≤–∞—Ç—å –∫–ª—é—á–æ–º –≥—Ä—É–ø–ø—ã, –∞ elem1 –∏ elem2 ‚Äî —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –≥—Ä—É–ø–ø—ã –ø–æ —ç—Ç–æ–º—É –∫–ª—é—á—É.

–ö–ª–∞—Å—Å Grouper –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –¥–≤–∞ –º–µ—Ç–æ–¥–∞ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞:

add() ‚Äî –º–µ—Ç–æ–¥, –ø—Ä–∏–Ω–∏–º–∞—é—â–∏–π –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç –∏ –¥–æ–±–∞–≤–ª—è—é—â–∏–π –µ–≥–æ –≤ –Ω—É–∂–Ω—É—é –≥—Ä—É–ø–ø—É —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∫–ª–∞—Å—Å–∞ Grouper
group_for() ‚Äî –º–µ—Ç–æ–¥, –ø—Ä–∏–Ω–∏–º–∞—é—â–∏–π –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç, –æ–ø—Ä–µ–¥–µ–ª—è—é—â–∏–π, –≤ –∫–∞–∫—É—é –≥—Ä—É–ø–ø—É —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∫–ª–∞—Å—Å–∞ Grouper –ø–æ–ø–∞–¥–µ—Ç —ç—Ç–æ—Ç –æ–±—ä–µ–∫—Ç, –∏ –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∏–π –∫–ª—é—á —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã
–ü—Ä–∏ –ø–µ—Ä–µ–¥–∞—á–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∫–ª–∞—Å—Å–∞ Grouper –≤ —Ñ—É–Ω–∫—Ü–∏—é len() –¥–æ–ª–∂–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä—É–ø–ø –≤ –Ω–µ–º.

–ü–æ–º–∏–º–æ —ç—Ç–æ–≥–æ, —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ Grouper –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏—Ç–µ—Ä–∏—Ä—É–µ–º—ã–º –æ–±—ä–µ–∫—Ç–æ–º, —Ç–æ –µ—Å—Ç—å –ø–æ–∑–≤–æ–ª—è—Ç—å –ø–µ—Ä–µ–±–∏—Ä–∞—Ç—å —Å–≤–æ–∏ –≥—Ä—É–ø–ø—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä, —Å –ø–æ–º–æ—â—å—é —Ü–∏–∫–ª–∞ for. –í –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ –≥—Ä—É–ø–ø–∞ ‚Äî —ç—Ç–æ –∫–æ—Ä—Ç–µ–∂, –ø–µ—Ä–≤—ã–º —ç–ª–µ–º–µ–Ω—Ç–æ–º –∫–æ—Ç–æ—Ä–æ–≥–æ —è–≤–ª—è–µ—Ç—Å—è –∫–ª—é—á –≥—Ä—É–ø–ø—ã, –≤—Ç–æ—Ä—ã–º ‚Äî —Å–ø–∏—Å–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≥—Ä—É–ø–ø—ã. –ì—Ä—É–ø–ø—ã –ø—Ä–∏ –∏—Ç–µ—Ä–∏—Ä–æ–≤–∞–Ω–∏–∏ –º–æ–≥—É—Ç —Ä–∞—Å–ø–æ–ª–∞–≥–∞—Ç—å—Å—è –≤ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ.

–¢–∞–∫–∂–µ —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ Grouper –¥–æ–ª–∂–µ–Ω –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å —Å –ø–æ–º–æ—â—å—é –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ in, –≤ –∫–æ—Ç–æ—Ä–æ–π –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –Ω–∞–ª–∏—á–∏–µ –≤ —ç–∫–∑–µ–º–ø–ª—è—Ä–µ –∫–ª–∞—Å—Å–∞ Grouper –≥—Ä—É–ø–ø—ã —Å –∏—Å–∫–æ–º—ã–º –∫–ª—é—á–æ–º.

–ù–∞–∫–æ–Ω–µ—Ü, —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ Grouper –¥–æ–ª–∂–µ–Ω –ø–æ–∑–≤–æ–ª—è—Ç—å –ø–æ–ª—É—á–∞—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã –≥—Ä—É–ø–ø—ã –ø–æ –∫–ª—é—á—É. –í –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≥—Ä—É–ø–ø—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –≤ –≤–∏–¥–µ —Å–ø–∏—Å–∫–∞, –ø—Ä–∏ —ç—Ç–æ–º —ç–ª–µ–º–µ–Ω—Ç—ã –≤ —Å–ø–∏—Å–∫–µ –¥–æ–ª–∂–Ω—ã —Ä–∞—Å–ø–æ–ª–∞–≥–∞—Ç—å—Å—è –≤ —Ç–æ–º –ø–æ—Ä—è–¥–∫–µ, –≤ –∫–æ—Ç–æ—Ä–æ–º –æ–Ω–∏ –±—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã.

–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –≠–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ Grouper –Ω–µ –¥–æ–ª–∂–µ–Ω –∑–∞–≤–∏—Å–µ—Ç—å –æ—Ç –∏—Ç–µ—Ä–∏—Ä—É–µ–º–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞, –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ—Ç–æ—Ä–æ–≥–æ –æ–Ω –±—ã–ª —Å–æ–∑–¥–∞–Ω. –î—Ä—É–≥–∏–º–∏ —Å–ª–æ–≤–∞–º–∏, –µ—Å–ª–∏ –∏—Å—Ö–æ–¥–Ω—ã–π –∏—Ç–µ—Ä–∏—Ä—É–µ–º—ã–π –æ–±—ä–µ–∫—Ç –∏–∑–º–µ–Ω–∏—Ç—Å—è, —Ç–æ —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ Grouper –∏–∑–º–µ–Ω–∏—Ç—å—Å—è  –Ω–µ –¥–æ–ª–∂–µ–Ω.

–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∞—Å—Å–∞ Grouper –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–π, —Ç–æ –µ—Å—Ç—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∫ –Ω–∞–ª–∏—á–∏—é –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –∞—Ç—Ä–∏–±—É—Ç–æ–≤ –Ω–µ—Ç.

–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 3. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤ –º–µ—Ç–æ–¥–∞—Ö –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è. –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç—Å—è, —á—Ç–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∫–ª–∞—Å—Å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏.

–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 4. –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ —Å—Å—ã–ª–∫–∞–º:
https://github.com/python-generation/OOP/tree/main/Module_6/Module_6.2/Module_6.2.19
'''
import copy


class Grouper:

    def __init__(self, iterable, key):
        self.key = key
        self.iterable = copy.deepcopy(iterable)
        self.lst = {}
        for i in self.iterable:
            if key(i) not in self.lst:
                self.lst[key(i)] = []
        for i in self.lst:
            for j in self.iterable:
                if i == self.key(j):
                    self.lst[i].append(j)

    def add(self, obj):
        if self.key(obj) not in self.lst:
            self.lst[self.key(obj)] = [obj]
        else:
            self.lst[self.key(obj)].append(obj)

    def group_for(self, obj):
        return self.key(obj)

    def __len__(self):
        return len(self.lst)

    def __getitem__(self, item):
        return self.lst[item]

    def __setitem__(self, key, value):
        self.lst[key] = value

    def __delitem__(self, key):
        del self.lst[key]

    def __iter__(self):
        return iter(self.lst.items())

    def __contains__(self, item):
        return item in self.lst


# INPUT DATA:

# TEST_1:
grouper = Grouper(['bee', 'geek', 'one', 'two', 'five', 'hi'], key=len)

print(grouper[2])
print(grouper[3])
print(grouper[4])

# TEST_2:
grouper = Grouper(['bee', 'geek', 'one', 'two', 'five', 'hi'], key=len)

print(3 in grouper)
print('bee' in grouper)

# TEST_3:
grouper = Grouper(['hi'], key=lambda s: s[0])
print(len(grouper))

grouper.add('hello')
grouper.add('bee')
grouper.add('big')

print(len(grouper))

grouper.add('geek')
print(grouper['h'])
print(grouper['b'])
print(grouper['g'])

print(len(grouper))

# TEST_4:
grouper = Grouper(['hi'], key=lambda s: s[0])

print(grouper.group_for('hello'))
print(grouper.group_for('bee'))
print(grouper['h'])
print('b' in grouper)

# TEST_5:
data = [504, 506, 503, 507, 507, 508, 504, 510, 500, 503, 501, 502, 503, 502, 502, 510, 502, 500, 503, 508, 508, 502,
        507, 500, 502, 501, 502, 504, 505, 505, 500, 501, 507, 504, 509, 507, 508, 508, 502, 510, 503, 501, 505, 501,
        510, 505, 500, 507, 510, 507, 506, 507, 501, 502, 504, 506, 501, 501, 506, 502, 508, 505, 509, 509, 502, 506,
        507, 505, 505, 507, 503, 505, 504, 510, 505, 503, 508, 508, 504, 504, 510, 501, 506, 503, 502, 508, 507, 503,
        501, 506, 505, 506, 504, 504, 505, 503, 507, 504, 507, 510]

grouper = Grouper(data, key=lambda x: x % 2 == 0)
print(grouper[True])
print(grouper[False])

# TEST_6:
from collections import namedtuple

Person = namedtuple('Person', ['name', 'age', 'height'])

persons = [Person('Tim', 63, 193), Person('Eva', 47, 158),
           Person('Mark', 71, 172), Person('Alex', 45, 193),
           Person('Jeff', 63, 193), Person('Ryan', 41, 184),
           Person('Ariana', 28, 158), Person('Liam', 69, 193)]

grouper = Grouper(persons, key=lambda x: x.height)
print(sorted(grouper))

# TEST_7:
grouper = Grouper([], key=lambda x: x)
print(*grouper)

# TEST_8:
d = list(range(1, 100))
grouper = Grouper(d, bool)
print(*grouper)

d.append(100)
print(*grouper)

# TEST_9:
d = range(1, 100)
grouper = Grouper(d, bool)
print(*grouper)

grouper.add(100)
print(*grouper)
